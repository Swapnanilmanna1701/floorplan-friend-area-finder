
import { CheckCircle, Download, Share2 } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface ResultsProps {
  results: {
    builtUpArea: number;
    deductedArea: number;
    carpetArea: number;
    unit: string;
    deductionType: string;
    deductionValue: number;
  };
}

const Results = ({ results }: ResultsProps) => {
  const unitDisplay = results.unit === 'sqft' ? 'sq. ft' : 'sq. m';
  const efficiency = ((results.carpetArea / results.builtUpArea) * 100).toFixed(1);

  const downloadResults = () => {
    const content = `
CARPET AREA CALCULATION RESULTS
===============================

Built-up Area: ${results.builtUpArea.toLocaleString()} ${unitDisplay}
Deduction Type: ${results.deductionType === 'percentage' ? 'Percentage' : 'Fixed Amount'}
Deduction Value: ${results.deductionValue}${results.deductionType === 'percentage' ? '%' : ` ${unitDisplay}`}
Deducted Area: ${results.deductedArea.toFixed(2)} ${unitDisplay}

CARPET AREA: ${results.carpetArea.toFixed(2)} ${unitDisplay}
Efficiency Ratio: ${efficiency}%

Generated by TheArchSpace Carpet Area Calculator
Date: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `carpet-area-calculation-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const shareResults = async () => {
    const text = `Carpet Area: ${results.carpetArea.toFixed(2)} ${unitDisplay} (from ${results.builtUpArea} ${unitDisplay} built-up area)`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Carpet Area Calculation',
          text: text,
          url: window.location.href
        });
      } catch (err) {
        console.log('Error sharing:', err);
      }
    } else {
      // Fallback: copy to clipboard
      try {
        await navigator.clipboard.writeText(text);
        alert('Results copied to clipboard!');
      } catch (err) {
        console.log('Error copying to clipboard:', err);
      }
    }
  };

  return (
    <Card className="shadow-lg border-green-200">
      <CardHeader className="bg-gradient-to-r from-green-600 to-emerald-600 text-white">
        <CardTitle className="flex items-center space-x-2">
          <CheckCircle className="w-6 h-6" />
          <span>Calculation Results</span>
        </CardTitle>
        <CardDescription className="text-green-100">
          Your carpet area has been calculated successfully
        </CardDescription>
      </CardHeader>
      <CardContent className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Main Results */}
          <div className="space-y-4">
            <div className="bg-gray-50 rounded-lg p-4">
              <h3 className="text-sm font-medium text-gray-600 mb-2">Input Details</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Built-up Area:</span>
                  <span className="font-medium">{results.builtUpArea.toLocaleString()} {unitDisplay}</span>
                </div>
                <div className="flex justify-between">
                  <span>Deduction Method:</span>
                  <span className="font-medium capitalize">{results.deductionType}</span>
                </div>
                <div className="flex justify-between">
                  <span>Deduction Value:</span>
                  <span className="font-medium">
                    {results.deductionValue}{results.deductionType === 'percentage' ? '%' : ` ${unitDisplay}`}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Deducted Area:</span>
                  <span className="font-medium">{results.deductedArea.toFixed(2)} {unitDisplay}</span>
                </div>
              </div>
            </div>
          </div>

          {/* Final Result */}
          <div className="space-y-4">
            <div className="bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-200 rounded-lg p-6 text-center">
              <h3 className="text-lg font-semibold text-gray-800 mb-2">Carpet Area</h3>
              <div className="text-3xl font-bold text-green-600 mb-2">
                {results.carpetArea.toFixed(2)}
              </div>
              <div className="text-sm text-gray-600">{unitDisplay}</div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
              <h4 className="text-sm font-medium text-gray-700 mb-1">Efficiency Ratio</h4>
              <div className="text-xl font-bold text-blue-600">{efficiency}%</div>
              <div className="text-xs text-gray-500 mt-1">
                Carpet area as % of built-up area
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-3 mt-6 pt-6 border-t">
          <Button onClick={downloadResults} variant="outline" className="flex-1">
            <Download className="w-4 h-4 mr-2" />
            Download Results
          </Button>
          <Button onClick={shareResults} variant="outline" className="flex-1">
            <Share2 className="w-4 h-4 mr-2" />
            Share Results
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default Results;
